module Main where

import Data.Maybe
import Data.Time.Clock (diffUTCTime,getCurrentTime)
import System.IO ( hSetBuffering, BufferMode(NoBuffering), stdout )
import System.Environment (getArgs)
import Game
import Valid
import Play
import Moves
import Parsing
import Search

main_map :: [(String, Game -> String -> IO ())]
main_map = [
    ("quit", \_ _ -> quit)
   ,("go", searchTest)
   ,("position", setPos)
  ]

quit = return ()

setPos :: Game -> String -> IO ()
setPos p str = do
           let str_ = read str
           let pos = parse pGame str_
           if isNothing pos then mainLoop p
           else do
             let po_ = (fst . fromJust) pos
             mainLoop po_


searchTest_ :: Game -> String -> IO ()
searchTest_ p str | n == 0 = do
  putStrLn $ "(-INF, " ++ show 1 ++ ")"
                  | otherwise = showBranches p n
  where n = read str

searchTest :: Game -> String -> IO ()
searchTest p str = searchTest_ p str >> mainLoop p

showBranches :: Game -> Int -> IO ()
showBranches p n = do
  star_t <- getCurrentTime
  mapM_ putStrLn sss
  end_t <- getCurrentTime
  putStrLn $ "Nodes: " ++ show total
  putStrLn $ "time " ++ show (end_t `diffUTCTime` star_t) ++ " elapsed."
  where ms = genValidMoves p
        sucPos = mapMaybe (`makeMove` p) ms
        npb = map (alphaBeta 0 _inf_score inf_score _inf_score (n-1)) sucPos
        spb = map show npb
        sms = map ((++ ": ") . show) ms
        sss = zipWith (++) sms spb
        total = sum $ map (\(_,n) -> n) npb

mainLoop :: Game -> IO ()
mainLoop p = do
  args <- getArgs
  if null args then do
    res <- getLine
    if null res then mainLoop p
      else do
        let cmd = words res
        let mbAction = lookup (head cmd) main_map
        if isNothing mbAction then mainLoop p
        else do
          let mba = fromJust mbAction
          mba p (unwords $ drop 1 cmd)
  else do
  searchTest_ p (head args)

main :: IO ()
main = do
  hSetBuffering stdout NoBuffering 
  mainLoop init_game
